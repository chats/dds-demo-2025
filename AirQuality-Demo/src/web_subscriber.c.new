#include "dds/dds.h"
#include "AirQuality.h"
#include <libwebsockets.h>
#include <jansson.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <stdbool.h>
#include <time.h>

#include "config.h"

#define WEBSOCKET_PORT 8082
#define MIN_UPDATE_INTERVAL_MS 100  // Minimum time between updates
//#define MIN_UPDATE_INTERVAL_MS 10  // Minimum time between updates
//#define MIN_UPDATE_INTERVAL_MS 1000  // Minimum time between updates

static struct lws_context *context;
static volatile bool running = true;
static dds_entity_t participant;
static dds_entity_t topic;
static dds_entity_t reader;
static void *samples[MAX_SAMPLES];
static dds_sample_info_t infos[MAX_SAMPLES];
static struct timespec last_update_time;
static json_t *cached_data = NULL;

static void signal_handler(int sig) {
    if (sig == SIGINT) {
        running = false;
        printf("\nShutting down...\n");
    }
}

static int time_elapsed_ms(struct timespec *start) {
    struct timespec now;
    clock_gettime(CLOCK_MONOTONIC, &now);
    return (now.tv_sec - start->tv_sec) * 1000 + 
           (now.tv_nsec - start->tv_nsec) / 1000000;
}

static char* create_json_message(AirQuality_AQIData *msg) {
    if (!cached_data) {
        cached_data = json_object();
    }
    
    json_object_set_new(cached_data, "district_id", json_string(msg->district_id));
    json_object_set_new(cached_data, "name", json_string(msg->name));
    json_object_set_new(cached_data, "latitude", json_real(msg->latitude));
    json_object_set_new(cached_data, "longitude", json_real(msg->longitude));
    json_object_set_new(cached_data, "pm25", json_real(msg->pm25));
    json_object_set_new(cached_data, "pm10", json_real(msg->pm10));
    json_object_set_new(cached_data, "aqi", json_real(msg->aqi));
    json_object_set_new(cached_data, "level", json_string(msg->level));
    json_object_set_new(cached_data, "timestamp", json_integer(msg->timestamp));
    
    return json_dumps(cached_data, JSON_COMPACT);
}

static int callback_aqi(struct lws *wsi, enum lws_callback_reasons reason,
                       void *user, void *in, size_t len) {
    static bool first_message = true;
                       
    switch (reason) {
        case LWS_CALLBACK_ESTABLISHED:
            clock_gettime(CLOCK_MONOTONIC, &last_update_time);
            samples[0] = AirQuality_AQIData__alloc();
            lws_callback_on_writable(wsi);
            break;

        case LWS_CALLBACK_SERVER_WRITEABLE: {
            if (!first_message && 
                time_elapsed_ms(&last_update_time) < MIN_UPDATE_INTERVAL_MS) {
                lws_callback_on_writable(wsi);
                break;
            }

            dds_return_t rc = dds_take(reader, samples, infos, MAX_SAMPLES, MAX_SAMPLES);
            if (rc > 0) {
                for (int i = 0; i < rc; i++) {
                    if (infos[i].valid_data) {
                        AirQuality_AQIData *msg = samples[i];
                        char *json_str = create_json_message(msg);
                        if (json_str) {
                            unsigned char buf[LWS_PRE + 2048];
                            size_t json_len = strlen(json_str);
                            memcpy(&buf[LWS_PRE], json_str, json_len);
                            lws_write(wsi, &buf[LWS_PRE], json_len, LWS_WRITE_TEXT);
                            free(json_str);
                        }
                    }
                }
                clock_gettime(CLOCK_MONOTONIC, &last_update_time);
                first_message = false;
            }
            lws_callback_on_writable(wsi);
            break;
        }

        default:
            break;
    }
    return 0;
}

static struct lws_protocols protocols[] = {
    {
        "aqi-protocol",
        callback_aqi,
        0,
        2048,
    },
    { NULL, NULL, 0, 0 }
};

int main(void) {
    signal(SIGINT, signal_handler);

    participant = dds_create_participant(DOMAIN_ID, NULL, NULL);
    topic = dds_create_topic(participant, &AirQuality_AQIData_desc, TOPIC_NAME, NULL, NULL);
    reader = dds_create_reader(participant, topic, NULL, NULL);

    struct lws_context_creation_info info;
    memset(&info, 0, sizeof info);
    info.port = WEBSOCKET_PORT;
    info.protocols = protocols;
    info.gid = -1;
    info.uid = -1;
    info.options = LWS_SERVER_OPTION_HTTP_HEADERS_SECURITY_BEST_PRACTICES_ENFORCE;

    context = lws_create_context(&info);
    if (!context) {
        printf("WebSocket context creation failed\n");
        return 1;
    }

    printf("WebSocket server started on port %d\n", WEBSOCKET_PORT);
    
    while (running) {
        lws_service(context, 50);
        //usleep(10000);  // 10ms sleep to reduce CPU usage
        usleep(100);
    }

    if (cached_data) {
        json_decref(cached_data);
    }
    AirQuality_AQIData_free(samples[0], DDS_FREE_ALL);
    lws_context_destroy(context);
    dds_delete(participant);
    return 0;
}