from flask import Flask, render_template, request, Response, jsonify
from subscriber import DDSSubscriber
import threading
import queue
import json
from datetime import datetime
import argparse
import requests
import pandas as pd
import io

app = Flask(__name__)
subscriber = DDSSubscriber()
message_queue = queue.Queue()

def fetch_excel_data(file_url):
    try:
        response = requests.get(file_url)
        if response.status_code == 200:
            # อ่านไฟล์ Excel จาก content ที่ได้
            df = pd.read_excel(io.BytesIO(response.content))
            # แปลง DataFrame เป็น dict ที่ใช้แสดงในตาราง
            data = {
                'headers': df.columns.tolist(),
                'rows': df.values.tolist()
            }
            return data
        else:
            return None
    except Exception as e:
        print(f"Error fetching Excel file: {e}")
        return None

def format_message(message):
    excel_data = fetch_excel_data(message.fileUrl) if message.fileUrl else None
    return {
        'id': message.id,
        'subject': message.subject,
        'recipient': message.recipient,
        'fileUrl': message.fileUrl,
        'timestamp': message.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
        'excel_data': excel_data
    }

@app.route('/')
def index():
    recipient_filter = request.args.get('recipient')
    messages = subscriber.get_messages(recipient_filter)
    formatted_messages = [format_message(msg) for msg in messages]
    return render_template('messages.html', messages=formatted_messages)

@app.route('/stream')
def stream():
    def event_stream():
        while True:
            try:
                message = message_queue.get(timeout=1)
                if message:
                    data = format_message(message)
                    yield f"data: {json.dumps(data)}\n\n"
            except queue.Empty:
                yield ": keepalive\n\n"
            except Exception as e:
                print(f"Streaming error: {e}")
                continue
    return Response(event_stream(), mimetype="text/event-stream")

def start_subscriber():
    subscriber.receive_messages(message_queue)

def main():
    parser = argparse.ArgumentParser(description='Start the DDS Subscriber')
    parser.add_argument('--port', type=int, default=8081,
                       help='Port to run the subscriber web interface (default: 8081)')
    args = parser.parse_args()

    subscriber_thread = threading.Thread(target=start_subscriber)
    subscriber_thread.daemon = True
    subscriber_thread.start()
    
    app.run(port=args.port, debug=True, threaded=True)

if __name__ == '__main__':
    main()