#include "dds/dds.h"
#include "SensorData.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <math.h>

// Constants for environmental simulation
#define MIN_TEMP 15.0
#define MAX_TEMP 45.0
#define MAX_TEMP_CHANGE 0.5
#define DEFAULT_DEVICE_ID "sensor-001"

// Function to get new temperature with realistic constraints
double get_next_temperature(double current_temp) {
    double change = (((double)rand() / RAND_MAX) * 2 - 1) * MAX_TEMP_CHANGE;
    double new_temp = current_temp + change;
    
    // Keep within realistic bounds
    if (new_temp < MIN_TEMP) new_temp = MIN_TEMP;
    if (new_temp > MAX_TEMP) new_temp = MAX_TEMP;
    
    return new_temp;
}

double calculate_humidity(double temperature) {
    const double t1 = 24.0;  // Reference temperature 1
    const double h1 = 36.0;  // Reference humidity 1
    const double t2 = 30.0;  // Reference temperature 2
    const double h2 = 58.0;  // Reference humidity 2
    
    // Linear interpolation: h = h1 + (h2-h1)*(t-t1)/(t2-t1)
    //double avg = ((t1/h1)+(t2/h2))/2.0;
    double avg = 0.7;
    //double humidity = h1 + (h2 - h1) * (temperature - t1) / (t2 - t1);
    double humidity = temperature / avg;
    
    // Add small random variation (Â±2%)
    humidity += (((double)rand() / RAND_MAX) * 4.0 - 2.0);
    
    return humidity;
}

void print_usage(const char *program) {
    printf("Usage: %s [options]\n", program);
    printf("Options:\n");
    printf("  -h            Show this help message\n");
    printf("  -v            Enable verbose output\n");
    printf("  -s device_id  Set device ID (default: sensor-001)\n");
}

int main(int argc, char *argv[]) {
    bool verbose = false;
    char *device_id = DEFAULT_DEVICE_ID;
    
    // Parse arguments
    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "-h") == 0) {
            print_usage(argv[0]);
            return 0;
        }
        else if (strcmp(argv[i], "-v") == 0) {
            verbose = true;
        }
        else if (strcmp(argv[i], "-s") == 0 && i + 1 < argc) {
            device_id = argv[++i];
        }
    }

    dds_entity_t participant;
    dds_entity_t topic;
    dds_entity_t writer;
    dds_return_t rc;
    SensorData_Reading msg;

    srand(time(NULL));
    double current_temp = 25.0;

    // Create participant
    participant = dds_create_participant(DDS_DOMAIN_DEFAULT, NULL, NULL);
    if (participant < 0) {
        printf("Error creating participant: %s\n", dds_strretcode(-participant));
        return 1;
    }

    // Create topic
    topic = dds_create_topic(participant, &SensorData_Reading_desc, 
                           "SensorTopic", NULL, NULL);
    if (topic < 0) {
        printf("Error creating topic: %s\n", dds_strretcode(-topic));
        return 1;
    }

    // Create writer
    writer = dds_create_writer(participant, topic, NULL, NULL);
    if (writer < 0) {
        printf("Error creating writer: %s\n", dds_strretcode(-writer));
        return 1;
    }

    while (1) {
        // Update values
        current_temp = get_next_temperature(current_temp);

        msg.device_id = device_id;
        msg.temperature = current_temp;
        msg.humidity =calculate_humidity(current_temp);
        msg.timestamp = (long)time(NULL);

        rc = dds_write(writer, &msg);
        if (rc != DDS_RETCODE_OK) {
            printf("Error writing sample: %s\n", dds_strretcode(-rc));
        } else if (verbose) {
            printf("Published: Device=%s, Temp=%.1f, Humidity=%.1f, Time=%d\n",
                   msg.device_id, msg.temperature, msg.humidity, msg.timestamp);
        }

        dds_sleepfor(DDS_SECS(1));
    }

    dds_delete(participant);
    return 0;
}